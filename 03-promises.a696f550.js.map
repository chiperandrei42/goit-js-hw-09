{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACMC,EAAaC,SAASC,cAAc,kBACpCC,EAAiBF,SAASC,cAAc,iBACxCE,EAAgBH,SAASC,cAAc,mBAG7C,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,qBAAoCM,OAAfT,EAAS,QAAYS,OAANR,EAAM,OAElDG,EAAO,oBAAmCK,OAAfT,EAAS,QAAYS,OAANR,EAAM,M,GAEjDA,E,IAXaN,SAASC,cAAc,mBAiB/Bc,iBAAiB,SAAS,SAACC,GACrCA,EAAEC,iBAKF,IAJA,IAAMC,EAAaC,OAAOhB,EAAciB,OACpCd,EAAQa,OAAOpB,EAAWqB,OACxBC,EAAiBF,OAAOjB,EAAekB,OAEpCE,EAAI,EAAGA,EAAIJ,EAAYI,IAC9BlB,EAAcc,EAAYZ,GAAOiB,MAAK,SAAAC,G,OAAW3B,EAAA4B,OAAOC,QAAQF,E,IAAUG,OAAM,SAAAC,G,OAAS/B,EAAA4B,OAAOI,QAAQD,E,IACxGtB,GAASe,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from \"notiflix\";\nconst firstDelay = document.querySelector(\"[name='delay']\");\nconst delayIncrement = document.querySelector(\"[name='step']\");\nconst promiseAmount = document.querySelector(\"[name='amount']\");\nconst startButton = document.querySelector(\"[type='submit']\");\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n    \n  });\n}\n\n\nstartButton.addEventListener('click', (e) => {\n  e.preventDefault();\n  const userAmount = Number(promiseAmount.value);\n  let delay = Number(firstDelay.value);\n  const incrementDelay = Number(delayIncrement.value);\n\n  for (let i = 0; i < userAmount; i++) {\n    createPromise(userAmount, delay).then(message => Notify.success(message)).catch(error => Notify.failure(error));\n    delay += incrementDelay;\n  }\n})\n\n\n\n\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$firstDelay","document","querySelector","$ce04d3a99e08e73b$var$delayIncrement","$ce04d3a99e08e73b$var$promiseAmount","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","addEventListener","e","preventDefault","userAmount","Number","value","incrementDelay","i","then","message","Notify","success","catch","error","failure"],"version":3,"file":"03-promises.a696f550.js.map"}